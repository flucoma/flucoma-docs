# Part of the Fluid Corpus Manipulation Project (http://www.flucoma.org/)
# Copyright 2017-2019 University of Huddersfield.
# Licensed under the BSD-3 License.
# See license.md file in the project root for full license information.
# This project has received funding from the European Research Council (ERC)
# under the European Union’s Horizon 2020 research and innovation programme
# (grant agreement No 725899).
---
digest: Amplitude-based Detrending Slicer for Buffers
species: buffer-proc
sc-categories: Libraries>FluidDecomposition
sc-related: Guides/FluCoMa, Guides/FluidDecomposition
see-also: AmpSlice, BufAmpGate, BufOnsetSlice, BufNoveltySlice, BufTransientSlice
description: |
  This class implements an amplitude-based slicer,with various customisable options and conditions to detect relative amplitude changes as onsets.
discussion: |
  FluidBufAmpSlice is based on two envelop followers on a highpassed version of the signal: one slow that gives the trend, and one fast. Each have features that will interact. The example code below is unfolding the various possibilites in order of complexity.

  The process will return a buffer which contains indices (in sample) of estimated starting points of different slices.
parameters:
  server:
    description: |
      The server on which the buffers to be processed are allocated.
  source:
    description: |
      The index of the buffer to use as the source material to be sliced through novelty identification. The different channels of multichannel buffers will be summed.
  startFrame:
    description: |
      Where in the srcBuf should the slicing process start, in sample.
  numFrames:
    description: |
      How many frames should be processed.
  startChan:
    description: |
      For multichannel sources, which channel should be processed.
  numChans:
    description: |
      For multichannel sources, how many channel should be summed.
  indices:
    description: |
      The index of the buffer where the indices (in sample) of the estimated starting points of slices will be written. The first and last points are always the boundary points of the analysis.
  fastRampUp:
    description: |
      The number of samples the relative envelope follower will take to reach the next value when raising. Typically, this will be faster than slowRampUp.
  fastRampDown:
    description: |
      The number of samples the relative envelope follower will take to reach the next value when falling. Typically, this will be faster than slowRampDown.
  slowRampUp:
    description: |
      The number of samples the absolute envelope follower will take to reach the next value when raising.
  slowRampDown:
    description: |
      The number of samples the absolute envelope follower will take to reach the next value when falling.
  onThreshold:
    description: |
      The threshold in dB of the relative envelope follower to trigger an onset, aka to go ON when in OFF state. It is computed on the difference between the two envelope followers.
  offThreshold:
    description: |
      The threshold in dB of the relative envelope follower to reset, aka to allow the differential envelop to trigger again.
  floor:
    description: |
      	The level in dB the slowRamp needs to be above to consider a detected difference valid, allowing to ignore the slices in the noise floor.
  minSliceLength:
    description: |
      The length in samples that the Slice will stay ON. Changes of states during that period will be ignored.
  highPassFreq:
    description: |
      The frequency of the fourth-order Linkwitz–Riley high-pass filter (https://en.wikipedia.org/wiki/Linkwitz%E2%80%93Riley_filter). This is done first on the signal to minimise low frequency intermodulation with very fast ramp lengths. A frequency of 0 bypasses the filter.
  action:
    description: |
      A Function to be evaluated once the offline process has finished and indices instance variables have been updated on the client side. The metric will be passed indices as an argument.
output: Nothing, as the destination buffer is declared in the function call.
sc-code: |
  // define a test signal and a destination buffer
  (
  b = Buffer.sendCollection(s, Array.fill(44100,{|i| sin(i*pi/ (44100/640)) * (sin(i*pi/ 22050)).abs}));
  c = Buffer.new(s);
  )
  b.play
  b.plot

  //basic tests: absThresh sanity
  FluidBufAmpSlice.process(s,b,indices:c, absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12)
  c.query
  c.getn(0,c.numFrames*2,{|item|item.postln;})

  //basic tests: absThresh hysteresis
  FluidBufAmpSlice.process(s,b,indices:c, absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -16)
  c.query
  c.getn(0,c.numFrames*2,{|item|item.postln;})

  //basic tests: absThresh min slice
  FluidBufAmpSlice.process(s,b,indices:c, absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12, minSliceLength:441)
  c.query
  c.getn(0,c.numFrames*2,{|item|item.postln;})

  //basic tests: absThresh min silence
  FluidBufAmpSlice.process(s,b,indices:c, absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12, minSilenceLength:441)
  c.query
  c.getn(0,c.numFrames*2,{|item|item.postln;})

  //mid tests: absThresh time hysteresis on
  FluidBufAmpSlice.process(s,b,indices:c, absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12, minLengthAbove:441)
  c.query
  c.getn(0,c.numFrames*2,{|item|item.postln;})

  //mid tests: absThresh time hysteresis off
  FluidBufAmpSlice.process(s,b,indices:c, absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12, minLengthBelow:441)
  c.query
  c.getn(0,c.numFrames*2,{|item|item.postln;})

  //mid tests: absThresh with lookBack
  FluidBufAmpSlice.process(s,b,indices:c, absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12, lookBack:441)
  c.query
  c.getn(0,c.numFrames*2,{|item|item.postln;})

  //mid tests: absThresh with lookAhead
  FluidBufAmpSlice.process(s,b,indices:c, absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12, lookAhead:441)
  c.query
  c.getn(0,c.numFrames*2,{|item|item.postln;})

  //mid tests: absThresh with asymetrical lookBack and lookAhead
  FluidBufAmpSlice.process(s,b,indices:c, absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12, lookBack:221, lookAhead:441)
  c.query
  c.getn(0,c.numFrames*2,{|item|item.postln;})

  //advanced tests: absThresh hysteresis, long tail
  FluidBufAmpSlice.process(s,b,indices:c, absRampUp:2205, absRampDown:2205, absThreshOn:-60, absThreshOff: -60)
  c.query
  c.getn(0,c.numFrames*2,{|item|item.postln;})

  //solution: have to recut with relThresh
  FluidBufAmpSlice.process(s,b,indices:c, absRampUp:2205, absRampDown:2205, absThreshOn:-60, absThreshOff: -60, relRampUp:5, relRampDown:220, relThreshOn:2, relThreshOff:1)
  c.query
  c.getn(0,c.numFrames*2,{|item|item.postln;})

  //beware of double trig. a solution: minSliceLength
  FluidBufAmpSlice.process(s,b,indices:c, absRampUp:2205, absRampDown:2205, absThreshOn:-60, absThreshOff: -60, relRampUp:5, relRampDown:220, relThreshOn:2, relThreshOff:1, minSliceLength:4410)
  c.query
  c.getn(0,c.numFrames*2,{|item|item.postln;})
  ::

  STRONG::A musical example.::
  CODE::
  //load a buffer
  (
  b = Buffer.read(s,File.realpath(FluidBufAmpSlice.class.filenameSymbol).dirname.withTrailingSlash ++ "../AudioFiles/Nicol-LoopE-M.wav");
  c = Buffer.new(s);
  )

  // slice the samples
  FluidBufAmpSlice.process(s,b,indices:c, absRampUp:2205, absRampDown:2205, absThreshOn:-70, absThreshOff: -80, relRampUp:10, relRampDown:441, relThreshOn:14, relThreshOff:12, minSliceLength:4410)
  c.query
  c.getn(0,c.numFrames*2,{|item|item.postln;})

  //loops over a splice with the MouseX
  (
  {
  	BufRd.ar(1, b,
  		Phasor.ar(0,1,
  			BufRd.kr(1, c,
  				MouseX.kr(0, BufFrames.kr(c) - 1), 0, 1),
  			BufRd.kr(1, c,
  				MouseX.kr(1, BufFrames.kr(c)), 0, 1),
  			BufRd.kr(1,c,
  				MouseX.kr(0, BufFrames.kr(c) - 1), 0, 1)), 0, 1);
  		}.play;
  )
  ::

  STRONG::A stereo buffer example.::
  CODE::
  // make a stereo buffer
  b = Buffer.alloc(s,88200,2);

  // add some stereo clicks and listen to them
  ((0..3)*22050+11025).do({|item,index| b.set(item+(index%2), 1.0)})
  b.play

  // create a new buffer as destinations
  c = Buffer.new(s);

  //run the process on them
  (
  // with basic params
  Routine{
  	t = Main.elapsedTime;
  	FluidBufAmpSlice.process(s,b, indices: c, absRampUp:1, absRampDown:1, absThreshOn:-60, absThreshOff:-60);
  	(Main.elapsedTime - t).postln;
  }.play
  )

  // list the indicies of detected attacks - the two input channels have been summed
  c.getn(0,c.numFrames,{|item|item.postln;})
  ::
