# Part of the Fluid Corpus Manipulation Project (http://www.flucoma.org/)
# Copyright 2017-2019 University of Huddersfield.
# Licensed under the BSD-3 License.
# See license.md file in the project root for full license information.
# This project has received funding from the European Research Council (ERC)
# under the European Unionâ€™s Horizon 2020 research and innovation programme
# (grant agreement No 725899).
---
digest: A Loudness and True-Peak Descriptor on a Buffer
species: buffer-proc
sc-categories: Libraries>FluidDecomposition
sc-related: Guides/FluidCorpusManipulationToolkit
see-also: Loudness, BufPitch, BufMelBands, BufMFCC, BufSpectralShape, BufStats
description: |
  Two loudness descriptors, computing the true peak of the signal as well as applying the filters proposed by broadcasting standards to emulate the perception of amplitude.
discussion: |
  The process will return a multichannel buffer with two channels per input channel, one for loudness and one for the true peak value of the frame, both in dBfs.

  More information on broadcasting standardisation of loudness measurement is available at https://tech.ebu.ch/docs/tech/tech3341.pdf, and in more musician-friendly explantions at http://designingsound.org/2013/02/06/loudness-and-metering-part-1/.

  Each sample represents a value, which is every hopSize. Its sampling rate is sourceSR / hopSize.
process:
   This is the method that calls for the loudness descriptor to be calculated on a given source buffer.
parameters:
  server:
       description: |
         The server on which the buffers to be processed are allocated.
  source:
       description: |
         The index of the buffer to use as the source material to be described. The different channels of multichannel buffers will be processing sequentially.
  startFrame:
       description: |
         Where in the srcBuf should the process start, in sample.
  numFrames:
       description: |
         How many frames should be processed.
  startChan:
       description: |
         For multichannel srcBuf, which channel should be processed first.
  numChans:
       description: |
         For multichannel srcBuf, how many channel should be processed.
  features:
       description: |
         The destination buffer for the loudness descriptors.
  kWeighting:
       description: |
         A flag to switch the perceptual model of loudness. On by default, removing it makes the algorithm more CPU efficient by reverting to a simple RMS of the frame.
  truePeak:
       description: |
         A flag to switch the computation of TruePeak. On by default, removing it makes the algorithm more CPU efficient by reverting to a simple absolute peak of the frame.
  windowSize:
       description: |
         The size of the window on which the computation is done. By default 1024 to be similar with all other FluCoMa objects, the EBU specifies 400ms, which is 17640 samples at 44100.
  hopSize:
       description: |
         How much the buffered window moves forward, in samples. By default 512 to be similar with all other FluCoMa objects, the EBU specifies 100ms, which is 4410 samples at 44100.
  padding:
    description: |
      Controls the zero-padding added to either end of the source buffer or segment. Possible values are 0 (no padding), 1 (default, half the window size), or 2 (window size - hop size). Padding ensures that all input samples are completely analysed: with no padding, the first analysis window starts at time 0, and the samples at either end will be tapered by the STFT windowing function. Mode 1 has the effect of centering the first sample in the analysis window and ensuring that the very start and end of the segment are accounted for in the analysis. Mode 2 can be useful when the overlap factor (window size / hop size) is greater than 2, to ensure that the input samples at either end of the segment are covered by the same number of analysis frames as the rest of the analysed material.
  maxWindowSize:
    description: |
      How large can the windowSize be, by allocating memory at instantiation time. This cannot be modulated.
  action:
       description: |
         A Function to be evaluated once the offline process has finished and all Buffer's instance variables have been updated on the client side. The function will be passed [features] as an argument.
output:
   Nothing, as the destination buffer is declared in the function call.
sc-code: |
  // create a buffer with a short clicking sinusoidal burst (220Hz) starting at frame 8192 for 1024 frames
  (
  b = Buffer.sendCollection(s, (Array.fill(8192,{0}) ++ (Signal.sineFill(1203,[0,0,0,0,0,1],[0,0,0,0,0,0.5pi]).takeThese({|x,i|i>1023})) ++ Array.fill(8192,{0})));
  c = Buffer.new(s);
  )

  // listen to the source and look at the buffer
  b.play; b.plot;

  // run the process with basic parameters
  (
  Routine{
     t = Main.elapsedTime;
     FluidBufLoudness.process(s, source:b, features: c);
     (Main.elapsedTime - t).postln;
  }.play
  )

  // look at the analysis
  c.plot(minval:-130, maxval:6)

  // The values are interleaved [loudness,truepeak] in the buffer as they are on 2 channels: to get to the right frame, divide the SR of the input by the hopSize, then multiply by 2 because of the channel interleaving
  // here we are querying from one frame before (the signal starts at 8192, which is frame 16 (8192/512), therefore starting the query at frame 15, which is index 30.

  c.getn(30,10,{|x|x.postln})

  // observe that the first frame is silent, as expected. We can appreciate the overshoot of TruePeak of a full range sinewave starting on the second sample (fourth item in the list).
  ::

  STRONG::A stereo buffer example.::
  CODE::

  // load two very different files
  (
  b = Buffer.read(s,File.realpath(FluidBufLoudness.class.filenameSymbol).dirname.withTrailingSlash ++ "../AudioFiles/Tremblay-SA-UprightPianoPedalWide.wav");
  c = Buffer.read(s,File.realpath(FluidBufLoudness.class.filenameSymbol).dirname.withTrailingSlash ++ "../AudioFiles/Tremblay-AaS-AcousticStrums-M.wav");
  )

  // composite one on left one on right as test signals
  FluidBufCompose.process(s, c, numFrames:b.numFrames, startFrame:555000,destStartChan:1, destination:b)
  b.play

  // create a buffer as destinations
  c = Buffer.new(s);

  //run the process on them with EBU standard Instant Loudness of
  (
  Routine{
      t = Main.elapsedTime;
      FluidBufLoudness.process(s, b, features: c, windowSize: 17640, hopSize:4410);
      (Main.elapsedTime - t).postln;
  }.play
  )

  // look at the buffer: [loudness,truepeak] for left then [loudness,truepeak] for right
  c.plot(minval:-40, maxval:0)
  ::
