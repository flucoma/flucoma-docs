# Part of the Fluid Corpus Manipulation Project (http://www.flucoma.org/)
# Copyright 2017-2019 University of Huddersfield.
# Licensed under the BSD-3 License.
# See license.md file in the project root for full license information.
# This project has received funding from the European Research Council (ERC)
# under the European Unionâ€™s Horizon 2020 research and innovation programme
# (grant agreement No 725899).
---
digest: Classification with a multi-layer perceptron
species: data
sc-categories: Machine learning
sc-related: Classes/FluidMLPRegressor, Classes/FluidDataSet
see-also: 
description: |
  Perform classification between a :fluid-obj:`DataSet` and a :fluid-obj:`LabelSet` using a Multi-Layer Perception neural network.

parameters:
  hidden:
    description: |
      An `Classes/Array` that gives the sizes of any hidden layers in the network (default is two hidden layers of three units each).
  activation:
    description: |
      The activation function to use for the hidden layer units. Beware of the permitted ranges of each: relu (0->inf), sigmoid (0->1), tanh (-1,1).
  maxIter:
    description: |
      The maximum number of iterations to use in training.
  learnRate:
    description: |
      The learning rate of the network. Start small, increase slowly.
  momentum:
    description: |
      The training momentum, default 0.9
  batchSize:
    description: |
      The training batch size.
  validation:
    description: |
      The fraction of the DataSet size to hold back during training to validate the network against.
messages: 
  fit:
   description: |
      Train the network to map between a source :fluid-obj:`DataSet` and a target :fluid-obj:`LabelSet`
   args:
    - name: sourceDataSet
      description: |
        Source data
    - name: targetLabelSet
      description: |
        Target data
    - name: action
      description: |
        Function to run when training is complete
  predict:
   description: |
      Apply the learned mapping to a :fluid-obj:`DataSet` (given a trained network)
   args:
    - name: sourceDataSet
      description: |
        Input data
    - name: targetLabelSet
      description: |
        Output data
    - name: action
      description: |
        Function to run when complete
  predictPoint:
   description: |
      Apply the learned mapping to a single data point in a |buffer|
   args:
    - name: sourceBuffer
      description: |
        Input point
    - name: targetBuffer
      description: |
        Output point
    - name: action
      description: |
        A function to run when complete
  clear:
   description: |
      This will erase all the learning done in the neural network.
   args:
    - name: action
      description: |
        A function to run when complete
