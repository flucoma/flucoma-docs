# Part of the Fluid Corpus Manipulation Project (http://www.flucoma.org/)
# Copyright 2017-2019 University of Huddersfield.
# Licensed under the BSD-3 License.
# See license.md file in the project root for full license information.
# This project has received funding from the European Research Council (ERC)
# under the European Unionâ€™s Horizon 2020 research and innovation programme
# (grant agreement No 725899).
---
digest: An histogram of pitch classes in Real-Time
species: descriptor
sc-categories: Libraries>FluidDecomposition
sc-related: Guides/FluCoMa, Guides/FluidDecomposition, Classes/FluidMFCC
see-also: BufChroma, Pitch, Loudness, MFCC, SpectralShape
description: This class computes a histogram of the energy contained for each pitch class across the analysis frequency range.
discussion: |
  Also known as a chromagram, this typically allows you to get a contour of how much each semitone is represented in the spectrum over time. The number of chroma bins (and, thus, pitch classes) and the central reference frequency can be adjusted.

  The process will return a multichannel control steam of size maxNumChroma, which will be repeated if no change happens within the algorithm, i.e. when the hopSize is larger than the signal vector size.

process: The audio rate in, control rate out version of the object.
parameters:
  in:
    description: |
      The audio to be processed.
  numChroma:
       description: |
         The number of chroma bins per octave. It will determine how many channels are output per input channel.
  ref:
       description: |
        	The frequency of reference in Hz for the tuning of the middle A (default: 440 Hz)
  normalize:
       description: |
         This flag enables the scaling of the output. It is off (0) by default. (1) will normalise each frame to sum to 1. (2) normalises each frame relative to the loudest chroma bin being 1.
  minFreq:
       description: |
         The lower frequency included in the analysis, in Hz.
  maxFreq:
       description: |
         The highest frequency included in the analysis, in Hz.
  maxNumChroma:
    description: |
      The maximum number of chroma bins. This sets the number of channels of the output stream, and therefore cannot be modulated.
  windowSize:
    description: |
      The window size. As sinusoidal estimation relies on spectral frames, we need to decide what precision we give it spectrally and temporally, in line with Gabor Uncertainty principles. http://www.subsurfwiki.org/wiki/Gabor_uncertainty
  hopSize:
    description: |
      The window hop size. As sinusoidal estimation relies on spectral frames, we need to move the window forward. It can be any size but low overlap will create audible artefacts. The -1 default value will default to half of windowSize (overlap of 2).
  fftSize:
    description: |
      The inner FFT/IFFT size. It should be at least 4 samples long, at least the size of the window, and a power of 2. Making it larger allows an oversampling of the spectral precision. The -1 default value will default to windowSize.
  maxFFTSize:
    description: |
      How large can the FFT be, by allocating memory at instantiation time. This cannot be modulated.
output: |
  A  KR signal of maxNumChroma channels, giving the measure amplitudes for each chroma bin. The latency is windowSize.
sc-code: |
    code::
    //create a monitoring bus for the descriptors
    b = Bus.new(\control,0,40);

    //create a monitoring window for the values

    (
    w = Window("Mel Bands Monitor", Rect(10, 10, 620, 320)).front;
    a = MultiSliderView(w,Rect(10, 10, 600, 300)).elasticMode_(1).isFilled_(1);
    )

    //run the window updating routine.
    (
    ~winRange = 100;
    r = Routine {
        {
            b.get({ arg val;
                {
                    if(w.isClosed.not) {
                        a.value = val/~winRange;
                    }
                }.defer
            });
            0.01.wait;
        }.loop
    }.play
    )

    //play a simple sound to observe the values
    (
    x = 	{
    	var source = SinOsc.ar(LFTri.kr(0.1).exprange(80,800),0,0.1);
    	Out.kr(b,FluidMelBands.kr(source,maxNumBands:40) / 50);
    	source.dup;
    }.play;
    )

    // free this source
    x.free

    // load a more exciting one
    c = Buffer.read(s,File.realpath(FluidMelBands.class.filenameSymbol).dirname.withTrailingSlash ++ "../AudioFiles/Tremblay-AaS-SynthTwoVoices-M.wav");

    // analyse with parameters to be changed
    (
    x = 	{arg bands = 40, low = 20, high = 20000;
    	var source = PlayBuf.ar(1,c,loop:1);
    	Out.kr(b,FluidMelBands.kr(source, bands, low, high, 40) / 10);
    	source.dup;
    }.play;
    )

    //set the winRange to a more informative value
    ~winRange = 400;

    // observe the number of bands. The unused ones at the top are not updated
    x.set(\bands,20)

    // back to the full range
    x.set(\bands,40)

    // focus all the bands on a mid range
    x.set(\low,320, \high, 800)

    // focusing on the low end shows the fft resolution issue. One could restart the analysis with a larger fft to show more precision
    x.set(\low,20, \high, 160)

    // back to full range
    x.set(\low,20, \high, 20000)

    // free everything
    x.free;b.free;c.free;r.stop;
    ::

    STRONG::A musical example::

    CODE::
    // todo: port the Max one
    ::
