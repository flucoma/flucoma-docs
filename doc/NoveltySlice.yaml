# Part of the Fluid Corpus Manipulation Project (http://www.flucoma.org/)
# Copyright 2017-2019 University of Huddersfield.
# Licensed under the BSD-3 License.
# See license.md file in the project root for full license information.
# This project has received funding from the European Research Council (ERC)
# under the European Union’s Horizon 2020 research and innovation programme
# (grant agreement No 725899).
---
digest: Real-Time Novelty-Based Slicer
species: slicer
sc-categories: Libraries>FluidDecomposition
sc-related: Guides/FluCoMa, Guides/FluidDecomposition
see-also: BufNoveltySlice, OnsetSlice, AmpSlice, TransientSlice
description: A real-time slicer using an algorithm assessing novelty in the signal to estimate the slicing points.
discussion: |
  A novelty curve is derived from running a kernel across the diagonal of the similarity matrix, and looking for peak of changes. It implements the algorithm published in 'Automatic Audio Segmentation Using a Measure of Audio Novelty' by J Foote.

  The process will return an audio steam with sample-long impulses at estimated starting points of the different slices.
parameters:
  in:
    description: |
      The audio to be processed.
  feature:
    description: |
      The feature on which novelty is computed.
    enum:
      0: Spectrum – The magnitude of the full spectrum.
      1: MFCC – 13 Mel-Frequency Cepstrum Coefficients.
      2: Pitch – The pitch and its confidence.
      3: Loudness – The TruePeak and Loudness.
  kernelSize:
    description: |
      The granularity of the window in which the algorithm looks for change, in samples. A small number will be sensitive to short term changes, and a large number should look for long term changes.
  threshold:
    description: |
      The normalised threshold, between 0 an 1, on the novelty curve to consider it a segmentation point.
  filterSize:
    description: |
      The size of a smoothing filter that is applied on the novelty curve. A larger filter filter size allows for cleaner cuts on very sharp changes.
  minSliceLength:
    description: |
      The minimum duration of a slice in number of hopSize.
  windowSize:
    description: |
      The window size. As sinusoidal estimation relies on spectral frames, we need to decide what precision we give it spectrally and temporally, in line with Gabor Uncertainty principles. http://www.subsurfwiki.org/wiki/Gabor_uncertainty
  hopSize:
    description: |
      The window hop size. As sinusoidal estimation relies on spectral frames, we need to move the window forward. It can be any size but low overlap will create audible artefacts. The -1 default value will default to half of windowSize (overlap of 2).
  fftSize:
    description: |
      The inner FFT/IFFT size. It should be at least 4 samples long, at least the size of the window, and a power of 2. Making it larger allows an oversampling of the spectral precision. The -1 default value will default to windowSize.
  maxFFTSize:
    description: |
      How large can the FFT be, by allocating memory at instantiation time. This cannot be modulated.
  maxKernelSize:
    description: |
      This cannot be modulated.
  maxFilterSize:
    description: |
      This cannot be modulated.

output: An audio stream with impulses at detected transients. The latency between the input and the output is hopSize * (((kernelSize+1)/2).asInteger + ((filterSize + 1) / 2).asInteger + 1) samples at maximum.

sc-code: |
  //load some sounds
  b = Buffer.read(s,File.realpath(FluidNoveltySlice.class.filenameSymbol).dirname.withTrailingSlash ++ "../AudioFiles/Nicol-LoopE-M.wav");

  // basic param (the process add a latency of windowSize samples
  {var sig = PlayBuf.ar(1,b,loop:1); [FluidNoveltySlice.ar(sig,0,11,0.3) * 0.5, DelayN.ar(sig, 1, (1024 +((((11 - 1) / 2) + (1 - 1)) * 512)) / s.sampleRate)]}.play

  // other parameters
  {var sig = PlayBuf.ar(1,b,loop:1); [FluidNoveltySlice.ar(sig, 1, 31, 0.004, 4, 128, 64) * 0.5, DelayN.ar(sig, 1, (128 +((((5 - 1) / 2) + (4 - 1)) * 64))/ s.sampleRate)]}.play

  // more musical trans-trigged autopan
  (
  {
      var sig, trig, syncd, pan;
      sig = PlayBuf.ar(1,b,loop:1);
      trig = FluidNoveltySlice.ar(sig, 0, 11, 0.2, 4, 128);
      syncd = DelayN.ar(sig, 1, ( (128 +((((11 - 1) / 2) + (4 - 1)) * 64)) / s.sampleRate));
      pan = TRand.ar(-1,1,trig);
      Pan2.ar(syncd,pan);
  }.play
  )
