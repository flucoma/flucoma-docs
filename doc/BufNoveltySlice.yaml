# Part of the Fluid Corpus Manipulation Project (http://www.flucoma.org/)
# Copyright 2017-2019 University of Huddersfield.
# Licensed under the BSD-3 License.
# See license.md file in the project root for full license information.
# This project has received funding from the European Research Council (ERC)
# under the European Union’s Horizon 2020 research and innovation programme
# (grant agreement No 725899).
---
digest: Buffer-Based Novelty-Based Slicer
species: buffer-proc
sc-categories: Libraries>FluidDecomposition, UGens>Buffer
sc-related: Guides/FluCoMa, Guides/FluidDecomposition
see-also: NoveltySlice, BufAmpSlice, BufOnsetSlice, BufTransientSlice
description: |
    A non-real-time slicer using an algorithm assessing novelty in the signal to estimate the slicing points.
discussion: |
    A novelty curve is derived from running a kernel across the diagonal of the similarity matrix, and looking for peak of changes. It implements the seminal results published in  'Automatic Audio Segmentation Using a Measure of Audio Novelty' by J Foote.

    The process will return a buffer which contains indices (in sample) of estimated starting points of different slices.
process:
  This is the method that calls for the slicing to be calculated on a given source buffer.
parameters:
  server:
    description: |
        The server on which the buffers to be processed are allocated.
  source:
    description: |
        The index of the buffer to use as the source material to be sliced through novelty identification. The different channels of multichannel buffers will be summed.
  startFrame:
    description: |
        Where in the srcBuf should the slicing process start, in sample.
  numFrames:
    description: |
        How many frames should be processed.
  startChan:
    description: |
        For multichannel srcBuf, which channel should be processed.
  numChans:
    description: |
        For multichannel srcBuf, how many channel should be summed.
  indices:
    description: |
        The index of the buffer where the indices (in sample) of the estimated starting points of slices will be written. The first and last points are always the boundary points of the analysis.
  feature:
    description: The feature on which novelty is computed.
    enum:
      0: Spectrum – The magnitude of the full spectrum.
      1: MFCC – 13 Mel-Frequency Cepstrum Coefficients.
      2: Pitch – The pitch and its confidence.
      3: Loudness – The TruePeak and Loudness.
  kernelSize:
    description: |
        The granularity of the window in which the algorithm looks for change, in samples. A small number will be sensitive to short term changes, and a large number should look for long term changes.
  threshold:
    description: |
        The normalised threshold, between 0 an 1, on the novelty curve to consider it a segmentation point.
  filterSize:
    description: |
        The size of a smoothing filter that is applied on the novelty curve. A larger filter filter size allows for cleaner cuts on very sharp changes.
  minSliceLength:
    description: |
      The minimum duration of a slice in number of hopSize.
  windowSize:
    description: |
        The window size. As novelty estimation relies on spectral frames, we need to decide what precision we give it spectrally and temporally, in line with Gabor Uncertainty principles. http://www.subsurfwiki.org/wiki/Gabor_uncertainty
  hopSize:
    description: |
        The window hop size. As novelty estimation relies on spectral frames, we need to move the window forward. It can be any size but low overlap will create audible artefacts.
  fftSize:
    description: |
        The inner FFT/IFFT size. It should be at least 4 samples long, at least the size of the window, and a power of 2. Making it larger allows an oversampling of the spectral precision.
  maxFFTSize:
    description: |
      How large can the FFT be, by allocating memory at instantiation time. This cannot be modulated.
  maxKernelSize:
    description: |
      This cannot be modulated.
  maxFilterSize:
    description: |
      This cannot be modulated.
  action:
    description: |
        A Function to be evaluated once the offline process has finished and indices instance variables have been updated on the client side. The function will be passed indices as an argument.
output: Nothing, as the various destination buffers are declared in the function call.
sc-code: |
    // load some buffers
    (
    b = Buffer.read(s,File.realpath(FluidBufNoveltySlice.class.filenameSymbol).dirname.withTrailingSlash ++ "../AudioFiles/Tremblay-AaS-AcousticStrums-M.wav");
    c = Buffer.new(s);
    )

    (
    // with basic params
    Routine{
    	t = Main.elapsedTime;
    	FluidBufNoveltySlice.process(s,b, indices: c, threshold:0.45);
    	(Main.elapsedTime - t).postln;
    }.play
    )

    //check the number of slices: it is the number of frames in the transBuf minus the boundary index.
    c.query;

    //loops over a splice with the MouseX
    (
    {
    	BufRd.ar(1, b,
    		Phasor.ar(0,1,
    			BufRd.kr(1, c,
    				MouseX.kr(0, BufFrames.kr(c) - 1), 0, 1),
    			BufRd.kr(1, c,
    				MouseX.kr(1, BufFrames.kr(c)), 0, 1),
    			BufRd.kr(1,c,
    				MouseX.kr(0, BufFrames.kr(c) - 1), 0, 1)), 0, 1);
    		}.play;
    )
    	::

    STRONG::Examples of the impact of the filterSize::

    	CODE::
    // load some buffers
    (
    b = Buffer.read(s,File.realpath(FluidBufNoveltySlice.class.filenameSymbol).dirname.withTrailingSlash ++ "../AudioFiles/Tremblay-AaS-AcousticStrums-M.wav");
    c = Buffer.new(s);
    )

    // process with a given filterSize
    FluidBufNoveltySlice.process(s,b, indices: c, kernelSize:31, threshold:0.1, filterSize:1)

    //check the number of slices: it is the number of frames in the transBuf minus the boundary index.
    c.query;

    //play slice number 2
    (
    {
    	BufRd.ar(1, b,
    		Line.ar(
    			BufRd.kr(1, c, DC.kr(2), 0, 1),
    			BufRd.kr(1, c, DC.kr(3), 0, 1),
    			(BufRd.kr(1, c, DC.kr(3)) - BufRd.kr(1, c, DC.kr(2), 0, 1) + 1) / s.sampleRate),
    		0,1);
    }.play;
    )

    // change the filterSize in the code above to 4. Then to 12. Listen in between to the differences.

    // What's happening? In the first instance (filterSize = 1), the novelty line is jittery and therefore overtriggers on the arpegiated guitar. We also can hear attacks at the end of the segment. Setting the threshold higher (like in the 'Basic Example' pane) misses some more subtle variations.

    // So in the second settings (filterSize = 4), we smooth the novelty line a little, which allows us to catch small differences that are not jittery. It also corrects the ending cutting by the same trick: the averaging of the sharp pick is sliding up, crossing the threshold slightly earlier.

    // If we smooth too much, like the third settings (filterSize = 12), we start to loose precision and miss attacks. Have fun with different values of theshold then will allow you to find the perfect segment for your signal.
    ::

    STRONG::A stereo buffer example.::
    CODE::

    // make a stereo buffer
    b = Buffer.alloc(s,88200,2);

    // add some stereo clicks and listen to them
    ((0..3)*22050+11025).do({|item,index| b.set(item+(index%2), 1.0)});
    b.play

    // create a new buffer as destinations
    c = Buffer.new(s);

    //run the process on them
    (
    // with basic params
    Routine{
        t = Main.elapsedTime;
        FluidBufNoveltySlice.process(s,b, indices: c, threshold:0.3);
        (Main.elapsedTime - t).postln;
    }.play
    )

    // list the indicies of detected attacks - the two input channels have been summed
    c.getn(0,c.numFrames,{|item|item.postln;})
    ::
