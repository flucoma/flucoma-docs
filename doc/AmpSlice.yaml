# Part of the Fluid Corpus Manipulation Project (http://www.flucoma.org/)
# Copyright 2017-2019 University of Huddersfield.
# Licensed under the BSD-3 License.
# See license.md file in the project root for full license information.
# This project has received funding from the European Research Council (ERC)
# under the European Union’s Horizon 2020 research and innovation programme
# (grant agreement No 725899).
---
digest: Amplitude-based Detrending Slicer
species: slicer
sc-categories: Libraries>FluidDecomposition
sc-related: Guides/FluidCorpusManipulationToolkit
see-also: BufAmpSlice, AmpGate, OnsetSlice, NoveltySlice, TransientSlice
description: |
  This class implements an amplitude-based slicer, with various customisable options and conditions to detect relative amplitude changes as onsets.
discussion: |
  FluidAmpSlice is based on two envelop followers on a highpassed version of the signal: one slow that gives the trend, and one fast. Each have features that will interact. The example code below is unfolding the various possibilites in order of complexity.

  The process will return an audio steam with sample-long impulses at estimated starting points of the different slices.
parameters:
  fastRampUp:
    description: |
      The number of samples the relative envelope follower will take to reach the next value when raising. Typically, this will be faster than slowRampUp.
  fastRampDown:
    description: |
      The number of samples the relative envelope follower will take to reach the next value when falling. Typically, this will be faster than slowRampDown.
  slowRampUp:
    description: |
      The number of samples the absolute envelope follower will take to reach the next value when raising.
  slowRampDown:
    description: |
      The number of samples the absolute envelope follower will take to reach the next value when falling.
  onThreshold:
    description: |
      The threshold in dB of the relative envelope follower to trigger an onset, aka to go ON when in OFF state. It is computed on the difference between the two envelope followers.
  offThreshold:
    description: |
      The threshold in dB of the relative envelope follower to reset, aka to allow the differential envelop to trigger again.
  floor:
    description: |
      	The level in dB the slowRamp needs to be above to consider a detected difference valid, allowing to ignore the slices in the noise floor.
  minSliceLength:
    description: |
      The length in samples that the Slice will stay ON. Changes of states during that period will be ignored.
  highPassFreq:
    description: |
      The frequency of the fourth-order Linkwitz–Riley high-pass filter (https://en.wikipedia.org/wiki/Linkwitz%E2%80%93Riley_filter). This is done first on the signal to minimise low frequency intermodulation with very fast ramp lengths. A frequency of 0 bypasses the filter.
output:
   An audio stream with square envelopes around the slices. The latency between the input and the output is **max(minLengthAbove + lookBack, max(minLengthBelow,lookAhead))**.
sc-code: |
    //basic tests: absThresh sanity
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12);
    	[source, env]
    }.plot(0.1);
    )
    //basic tests: absThresh hysteresis
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -16);
    	[source, env]
    }.plot(0.1);
    )
    //basic tests: absThresh min slice
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12, minSliceLength:441);
    	[source, env]
    }.plot(0.1);
    )
    //basic tests: absThresh min silence
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12, minSilenceLength:441);
    	[source, env]
    }.plot(0.1);
    )
    //mid tests: absThresh time hysteresis on
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12, minLengthAbove:441);
    	[DelayN.ar(source,0.1,441/44100), env]
    }.plot(0.1);
    )
    //mid tests: absThresh time hysteresis off
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12, minLengthBelow:441);
    	[DelayN.ar(source,0.1,441/44100), env]
    }.plot(0.1);
    )
    //mid tests: absThresh with lookBack
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12,lookBack:441);
    	[DelayN.ar(source,0.1,441/44100), env]
    }.plot(0.1);
    )
    //mid tests: absThresh with lookAhead
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12,lookAhead:441);
    	[DelayN.ar(source,0.1,441/44100), env]
    }.plot(0.1);
    )
    //mid tests: absThresh with asymetrical lookBack and lookAhead
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12,lookBack:221, lookAhead:441);
    	[DelayN.ar(source,0.1,441/44100), env]
    }.plot(0.1);
    )
    //advanced tests: absThresh hysteresis, long tail
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:2000, absThreshOn:-12, absThreshOff: -16);
    	[source, env]
    }.plot(0.1);
    )
    //solution: have to recut with relThresh
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:2000, absThreshOn:-12, absThreshOff: -16, relRampUp:5, relRampDown:200, relThreshOn:-1, relThreshOff:-12);
    	[source, env]
    }.plot(0.1);
    )
    //beware of double trig
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:2000, absThreshOn:-12, absThreshOff: -16, relRampUp:5, relRampDown:200, relThreshOn:-1, relThreshOff:-1);
    	[source, env]
    }.plot(0.05);
    )
    //a solution: minSliceLength
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:2000, absThreshOn:-12, absThreshOff: -16, relRampUp:5, relRampDown:200, relThreshOn:-1, relThreshOff:-1, minSliceLength:441);
    	[source, env]
    }.plot(0.05);
    )
    //drum slicing, many ways
    //load a buffer
    b = Buffer.read(s,File.realpath(FluidAmpSlice.class.filenameSymbol).dirname.withTrailingSlash ++ "../AudioFiles/Nicol-LoopE-M.wav");
    //have fun with a gate (explore lookahead and lookback, but correct for latency)
    (
    {var env, source = PlayBuf.ar(1,b);
    	env = FluidAmpSlice.ar(source,absRampUp:44, absRampDown:2205, absThreshOn:-20, absThreshOff: -23, minSilenceLength:1100, lookBack:441);
    	[DelayN.ar(source,delaytime:441/44100), env]
    }.plot(2,separately:true);
    )

    (
    {var env, source = PlayBuf.ar(1,b);
    	env = FluidAmpSlice.ar(source,highPassFreq:120, absRampUp:4410, absRampDown:4410, absThreshOn:-60, absThreshOff: -60, relRampUp:10, relRampDown:2205, relThreshOn:13, relThreshOff:10, minSilenceLength:4410, highPassFreq:20);
    	[source,  Trig.ar(env,0)]
    }.play;
    )
