# Part of the Fluid Corpus Manipulation Project (http://www.flucoma.org/)
# Copyright 2017-2019 University of Huddersfield.
# Licensed under the BSD-3 License.
# See license.md file in the project root for full license information.
# This project has received funding from the European Research Council (ERC)
# under the European Unionâ€™s Horizon 2020 research and innovation programme
# (grant agreement No 725899).
---
digest: Buffer Compositing Utility
species: buffer-proc
sc-categories: Libraries>FluidDecomposition, UGens>Buffer
sc-related: Guides/FluCoMa, Guides/FluidDecomposition, Classes/Buffer
see-also:
description: |
  A flexible utility for combining the contents of buffers. It can be used for thing like mixing down multichannel buffers, or converting from left-right stereo to mid-side. It is used extensively in the example code of Fluid Decomposition.
discussion: |
  At its most simple, the object copies the content of a source buffer into a destination buffer. The flexibility comes from the various flags controlling which portions and channels of the source to use, and by applying gains (which can be positive or negative) to the source data and the portion of the destination that would be overwritten.

  The algorithm takes a srcBuf, and writes the information at the provided dstBuf. These buffer arguments can all point to the same buffer, which gives great flexibility in transforming and reshaping.
process: This method triggers the compositing.
parameters:
  server:
    description: |
         The server on which the buffers to be processed are allocated.
  source:
     description: |
         The bufNum of the source buffer.
  startFrame:
     description: |
         The starting point (in samples) from which to copy in the source buffer.
  numFrames:
     description: |
         The duration (in samples) to copy from the source buffer. The default (-1) copies the full lenght of the buffer.
  startChan:
     description: |
         The first channel from which to copy in the source buffer.
  numChans:
     description: |
         The number of channels from which to copy in the source buffer. This parameter will wrap around the number of channels in the source buffer. The default (-1) copies all of the buffer's channel.
  gain:
     description: |
         The gain applied to the samples to be copied from the source buffer.
  destination:
     description: |
         The bufNum of the destination buffer.
  destStartFrame:
     description: |
         The time offset (in samples) in the destination buffer to start writing the source at. The destination buffer will be resized if the portion to copy is overflowing.
  destStartChan:
     description: |
         The channel offest in the destination buffer to start writing the source at. The destination buffer will be resized if the number of channels to copy is overflowing.
  destGain:
     description: |
         The gain applied to the samples in the region of the destination buffer over which the source is to be copied. The default value (0) will overwrite that section of the destination buffer, and a value of 1.0 would sum the source to the material that was present.
  action:
      description: |
         A Function to be evaluated once the offline process has finished and destination instance variables have been updated on the client side. The function will be passed destination as an argument.
output:
   Nothing, as the destination buffer is declared in the function call.
discussion: >
   It is important to understand the rules used for determining the final desintinaiton buffer dimensions to get the most out of this object. If needs be, the destination buffer will be resized to the maxima of the requsted source numFrames and numChannels. Frames will be written up to the limit of actually available samples (meaning you can create zero padding); channels  will be written modulo the available channels, taking into account the channel offsets, meaning you can have channels repeat or loop into the source buffer's channels. See the examples below.
sc-code: |
  // load some buffers
  (
  b = Buffer.read(s,File.realpath(FluidBufCompose.class.filenameSymbol).dirname.withTrailingSlash ++ "../AudioFiles/Tremblay-AaS-SynthTwoVoices-M.wav");
  c = Buffer.read(s,File.realpath(FluidBufCompose.class.filenameSymbol).dirname.withTrailingSlash ++ "../AudioFiles/Tremblay-SA-UprightPianoPedalWide.wav");
  d = Buffer.new(s);
  )

  // with basic params (basic summing of each full buffer in all dimensions)
  FluidBufCompose.process(s, source: b,  destination: d);
  FluidBufCompose.process(s, source: c,  destination: d, destGain: 1.0);
  d.query;
  d.play;

  //constructing a mono buffer, with a quiet punch from the synth, with a choked piano resonance from the left channel
  d.free; d = Buffer.new(s);
  FluidBufCompose.process(s, source: b, numFrames: 9000, gain: 0.5, destination: d);
  FluidBufCompose.process(s, source: c, startFrame:30000, numFrames:44100, numChans:1, gain:0.9, destination: d, destGain: 1.0);
  d.query;
  d.play;

  //constructing a stereo buffer, with the end of the mono synth in both channels, with a piano resonance in swapped stereo
  d.free; d = Buffer.new(s);
  FluidBufCompose.process(s, source: b, startFrame: 441000, numChans: 2, gain: 0.6, destination: d);
  FluidBufCompose.process(s, source: c, numFrames: 78000, startChan: 1, numChans: 2, gain: 0.5, destStartFrame: 22050, destination: d,  destGain: 1.0);
  d.query;
  d.play;

  //constructing a one second buffer: the first second of each buffer, the mono synth on the right, the piano on the left
  d.free; d = Buffer.new(s);
  FluidBufCompose.process(s, source: b, numFrames: 44100, numChans: 1, destStartChan: 1, destination: d);
  FluidBufCompose.process(s, source: c, numFrames:44100, numChans:1, destination: d,  destGain: 1.0);
  d.query;
  d.play;
  ::

     STRONG::A more complex example: using composition as an Mid-Side filtering process::

     CODE::
  // load a stereo buffer and initialise the many destinations
  (
  b = Buffer.read(s,File.realpath(FluidBufCompose.class.filenameSymbol).dirname.withTrailingSlash ++ "../AudioFiles/Tremblay-SA-UprightPianoPedalWide.wav");
  c = Buffer.new(s);
  d = Buffer.new(s);
  e = Buffer.new(s);
  f = Buffer.new(s);
  )

  // encode the mid (in c) and the side (in d)
  (
  FluidBufCompose.process(s,b, numChans: 1, gain: -3.0.dbamp, destination: c);
  FluidBufCompose.process(s,b, numChans: 1, gain: -3.0.dbamp, destination: d);
  FluidBufCompose.process(s,b, numChans: 1, gain: -3.0.dbamp, startChan: 1, destination: c,  destGain: 1.0);
  FluidBufCompose.process(s,b, numChans: 1, gain: -3.0.dbamp * -1.0, startChan: 1, destination: d,  destGain: 1.0);
  )

  // (optional) compare auraly the stereo with the MS
  b.play;
  {PlayBuf.ar(1,[c,d])}.play;

  // The geeky bit: copy the side (buffer d) on itself with specific amplitudes and delays, in effect applying a FIR filter through expensive convolution

  // Important: do either of the 3 options below

  // option 1: apply a high pass on the side, with a cutoff of nyquist / 4
  e.free; e = Buffer.new(s);
  (
  [1.0, -1.0].do({ arg x,y;
     FluidBufCompose.process(s, d, gain: x, destStartFrame: y, destination: e, destGain: 1.0);
  });
  )

  // option 2: apply a high pass on the side, with a cutoff of nyquist / 10
  e.free; e = Buffer.new(s);
  (
  [0.8, -0.32, -0.24, -0.16, -0.08].do({ arg x,y;
     FluidBufCompose.process(s, d, gain: x, destStartFrame: y, destination: e, destGain: 1.0);
  });
  )

  // option 3: apply a high pass on the side, with a cutoff of nyquist / 100
  e.free; e = Buffer.new(s);
  (
  [0.982494, -0.066859, -0.064358, -0.061897, -0.059477, -0.057098, -0.054761, -0.052466, -0.050215, -0.048007, -0.045843, -0.043724, -0.041649, -0.03962, -0.037636, -0.035697, -0.033805, -0.031959, -0.030159, -0.028406, -0.026699, -0.025038, -0.023425, -0.021857, -0.020337].do({ arg x,y;
     FluidBufCompose.process(s, d, gain: x, destStartFrame: y, destination: e, destGain: 1.0);
  });
  )

  // play the high-passed side buffer
  e.play;
  // if you want to try the other filters, do not forget to clear the destination buffer since it will add programmatically onto itself and would not create the expected frequency response

  // decode the MS back to stereo
  (
  FluidBufCompose.process(s,c, numChans: 2, gain: -3.0.dbamp, destination: f);
  FluidBufCompose.process(s,e, gain: -3.0.dbamp, destination: f,  destGain: 1.0);
  FluidBufCompose.process(s,e, gain: -3.0.dbamp * -1.0, destination: f, destStartChan: 1, destGain: 1.0);
  )

  // play the MS processed version
  f.play;

  // compare with the original
  b.play;
  ::
