# Part of the Fluid Corpus Manipulation Project (http://www.flucoma.org/)
# Copyright 2017-2019 University of Huddersfield.
# Licensed under the BSD-3 License.
# See license.md file in the project root for full license information.
# This project has received funding from the European Research Council (ERC)
# under the European Unionâ€™s Horizon 2020 research and innovation programme
# (grant agreement No 725899).
---
digest: Amplitude-based Gating Slicer
species: slicer
sc-categories: Libraries>FluidDecomposition
sc-related: Guides/FluCoMa, Guides/FluidDecomposition
see-also: BufAmpGate, AmpSlice, OnsetSlice, NoveltySlice, TransientSlice
description: |
  This class implements an amplitude-based slicer, with various customisable options and conditions to detect absolute amplitude changes as onsets and offsets.
discussion: |
  FluidAmpSlice is based on an envelop follower on a highpassed version of the signal, which is then going through a Schmidt trigger and state-aware time contraints. The example code below is unfolding the various possibilites in order of complexity.

  The process will return an audio steam with square envelopes around detected slices the different slices, where 1s means in slice and 0s mean in silence.
parameters:
  rampUp:
     description: |
         The number of samples the envelope follower will take to reach the next value when rising.
  rampDown:
     description: |
         The number of samples the envelope follower will take to reach the next value when falling.
  onThreshold:
     description: |
         The threshold in dB of the envelope follower to trigger an onset, aka to go ON when in OFF state.
  offThreshold:
     description: |
         The threshold in dB of the envelope follower to trigger an offset, , aka to go ON when in OFF state.
  minSliceLength:
     description: |
         The length in samples that the Slice will stay ON. Changes of states during that period will be ignored.
  minSilenceLength:
     description: |
         The length in samples that the Slice will stay OFF. Changes of states during that period will be ignored.
  minLengthAbove:
     description: |
         The length in samples that the envelope have to be above the threshold to consider it a valid transition to ON. The Slice will start at the first sample when the condition is met. Therefore, this affects the latency.
  minLengthBelow:
     description: |
         The length in samples that the envelope have to be below the threshold to consider it a valid transition to OFF. The Slice will end at the first sample when the condition is met. Therefore, this affects the latency.
  lookBack:
     description: |
         The length of the buffer kept before an onset to allow the algorithm, once a new Slice is detected, to go back in time (up to that many samples) to find the minimum amplitude as the Slice onset point. This affects the latency of the algorithm.
  lookAhead:
     description: |
         The length of the buffer kept after an offset to allow the algorithm, once the Slice is considered finished, to wait further in time (up to that many samples) to find a minimum amplitude as the Slice offset point. This affects the latency of the algorithm.
  highPassFreq:
     description: |
         The frequency of the fourth-order Linkwitz-Riley high-pass filter (https://en.wikipedia.org/wiki/Linkwitz%E2%80%93Riley_filter). This is done first on the signal to minimise low frequency intermodulation with very fast ramp lengths. A frequency of 0 bypasses the filter.
  maxSize:
     description: |
         How large can the buffer be for time-critical conditions, by allocating memory at instantiation time. This cannot be modulated.
output:
   An audio stream with square envelopes around the slices. The latency between the input and the output is **max(minLengthAbove + lookBack, max(minLengthBelow,lookAhead))**.
sc-code: |
    //basic tests: absThresh sanity
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12);
    	[source, env]
    }.plot(0.1);
    )
    //basic tests: absThresh hysteresis
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -16);
    	[source, env]
    }.plot(0.1);
    )
    //basic tests: absThresh min slice
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12, minSliceLength:441);
    	[source, env]
    }.plot(0.1);
    )
    //basic tests: absThresh min silence
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12, minSilenceLength:441);
    	[source, env]
    }.plot(0.1);
    )
    //mid tests: absThresh time hysteresis on
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12, minLengthAbove:441);
    	[DelayN.ar(source,0.1,441/44100), env]
    }.plot(0.1);
    )
    //mid tests: absThresh time hysteresis off
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12, minLengthBelow:441);
    	[DelayN.ar(source,0.1,441/44100), env]
    }.plot(0.1);
    )
    //mid tests: absThresh with lookBack
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12,lookBack:441);
    	[DelayN.ar(source,0.1,441/44100), env]
    }.plot(0.1);
    )
    //mid tests: absThresh with lookAhead
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12,lookAhead:441);
    	[DelayN.ar(source,0.1,441/44100), env]
    }.plot(0.1);
    )
    //mid tests: absThresh with asymetrical lookBack and lookAhead
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:100, absThreshOn:-12, absThreshOff: -12,lookBack:221, lookAhead:441);
    	[DelayN.ar(source,0.1,441/44100), env]
    }.plot(0.1);
    )
    //advanced tests: absThresh hysteresis, long tail
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:2000, absThreshOn:-12, absThreshOff: -16);
    	[source, env]
    }.plot(0.1);
    )
    //solution: have to recut with relThresh
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:2000, absThreshOn:-12, absThreshOff: -16, relRampUp:5, relRampDown:200, relThreshOn:-1, relThreshOff:-12);
    	[source, env]
    }.plot(0.1);
    )
    //beware of double trig
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:2000, absThreshOn:-12, absThreshOff: -16, relRampUp:5, relRampDown:200, relThreshOn:-1, relThreshOff:-1);
    	[source, env]
    }.plot(0.05);
    )
    //a solution: minSliceLength
    (
    {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
    	env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:2000, absThreshOn:-12, absThreshOff: -16, relRampUp:5, relRampDown:200, relThreshOn:-1, relThreshOff:-1, minSliceLength:441);
    	[source, env]
    }.plot(0.05);
    )
    //drum slicing, many ways
    //load a buffer
    b = Buffer.read(s,File.realpath(FluidAmpSlice.class.filenameSymbol).dirname.withTrailingSlash ++ "../AudioFiles/Nicol-LoopE-M.wav");
    //have fun with a gate (explore lookahead and lookback, but correct for latency)
    (
    {var env, source = PlayBuf.ar(1,b);
    	env = FluidAmpSlice.ar(source,absRampUp:44, absRampDown:2205, absThreshOn:-20, absThreshOff: -23, minSilenceLength:1100, lookBack:441);
    	[DelayN.ar(source,delaytime:441/44100), env]
    }.plot(2,separately:true);
    )

    (
    {var env, source = PlayBuf.ar(1,b);
    	env = FluidAmpSlice.ar(source,highPassFreq:120, absRampUp:4410, absRampDown:4410, absThreshOn:-60, absThreshOff: -60, relRampUp:10, relRampDown:2205, relThreshOn:13, relThreshOff:10, minSilenceLength:4410, highPassFreq:20);
    	[source,  Trig.ar(env,0)]
    }.play;
    )
