<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>
<!--
Part of the Fluid Corpus Manipulation Project (http://www.flucoma.org/)
Copyright 2017-2019 University of Huddersfield.
Licensed under the BSD-3 License.
See license.md file in the project root for full license information.
This project has received funding from the European Research Council (ERC)
under the European Unionâ€™s Horizon 2020 research and innovation programme
(grant agreement No 725899).
-->
<!-- DO NOT EDIT THIS FILE ... YOU WILL LOSE YOUR WORK -->
<c74object name='{{ client_name | as_host_object_name }}' category='FluidCorpusManuipulation'>
	<digest>{{ digest }}</digest>
	<description>{{ description | striprst }}</description>
  <discussion>
    <h4><openfilelink filename="Fluid Corpus Manipulation Toolkit.maxpat">Open the Overview Patch</openfilelink></h4>
    {{ discussion | rst | indent(8, first=True)}}
    <p>Read more about {{ client_name | as_host_object_name }} on the <a href='{{ learn_url | e }}'>learn platform</a>.</p>
    <p>{{ client_name | as_host_object_name }} is part of the Fluid Decomposition Toolkit of the FluCoMa project. For more explanations, learning material, and discussions on its musicianly uses, visit <a href="http://www.flucoma.org/">flucoma.org</a>.</p>
  </discussion>
	<!--METADATA-->
	<metadatalist>
		<metadata name='author'>FluCoMa</metadata>
		<metadata name='tag'>Fluid Decomposition</metadata>
		<metadata name='tag'>corpus</metadata>
	</metadatalist>
	<!--ARGUMENTS-->
	<objarglist>
    {% for name,bits in arguments.items()  %}
      <objarg name='{{ name | lower | e }}' optional='1' type='number'>
        <digest>
          {{ bits['displayName']| e | indent(4,first=True) }}
        </digest>
        <description>
          {{ bits['description']| rst | indent(4,first=True) }}
          <!-- {{ bits | constraints(attributes,arguments) }} -->
        </description>
        {% if 'default' in bits  %}
        <attributelist>
          <attribute name="default" get="1" set="1" type="int" size='{{ bits['size'] }}' value='{{ bits['default'] }}' />
        </attributelist>
        {% endif %}
      </objarg>
    {% endfor %}
	</objarglist>
	<!--MESSAGES-->
  <methodlist>
 {%- if client_name.startswith('Buf')  -%}
   <method name="bang">
     <arglist />
     <digest>
       Trigger processing
     </digest>
     <description>
       A bang will commence processing on object given its current settings, unless it is already busy. In that case, the behaviour depends on the value of the <m>queue</m> attribute.
     </description>
   </method>
   <method name="cancel">
     <arglist />
     <digest>
       Cancel non-blocking processing
     </digest>
     <description>
       When processing in non-blocking mode, this will cancel the job underway, without updating destination buffers.
     </description>
   </method>
  {%- endif -%}
    <method name="reset">
      <arglist />
      <digest>
        Return the object to its original state
      </digest>
      <description>
        Calling <m>reset</m> will change parameter values back to those the object was <i>created</i> with, i.e. any attribute values set in the box will be retained
      </description>
    </method>

	{%- for name, bits in messages.items() -%}
		 {% if name == 'dump'  %}
     <method name='dump'>
       <digest>Dump the state of this object from the dump outlet as a <o>dict</o>.</digest>
     </method>
     {% elif name == 'load' %}
     <method name='load'>
       <arglist>
         <arg name="dictionary" optional='0' type='dictionary'/>
       </arglist>
       <description>Replace the internal state of the object from a <o>dict</o>. The message should take the form <code>load dictionary &lt;dictid&gt;</code>
      </description>
     </method>
     {% elif name == 'read' %}
     <method name='read'>
       <arglist>
         <arg name="path" optional="1" type='symbol, optional'/>
       </arglist>
       <description>Replace the internal state of the object from a JSON file on disk. With no argument, a file dialog will appear to choose the file.
      </description>
     </method>
     {% elif name == 'write' %}
     <method name='write'>
       <arglist>
         <arg name="path" optional="1" type='symbol, optional'/>
       </arglist>
       <description>Save the internal state of the object to a JSON file on disk. With no argument, a file dialog will appear to choose the file.
      </description>
     </method>
    {% else %}
    <method name='{{ name| lower | e }}'>
			<arglist>
				{%- for argname,argdata in bits['args'].items() -%}
				<arg name= "{{ argname | e }}" optional='0' type="{{ argdata['type'] | lower | typename}}" />
				{%- endfor -%}
			</arglist>
			<description>
        {{ bits['description'] | rst | indent(4,first=True) }}
        
        {% if bits['args'].items() | length != 0 %}<h5>Argument details:</h5>{% endif %}
        <ul>
        {%- for argname,argdata in bits['args'].items() -%}
          <li>{{ argname | e }}: {{argdata['description'] | rst }}</li>
        {%- endfor -%}
      </ul>
			</description>
		</method>
    {% endif %}
	{%- endfor -%}
	</methodlist>
	<!--ATTRIBUTES-->
	<attributelist>
    {%- for name,bits in attributes.items()  -%}
      <attribute name='{{ name | lower | e }}' get='1' set='1' type='{{ bits['type']|typename }}' size='{{ bits['size'] }}'>
        <digest>
          {{ bits['displayName']| e | indent(4,first=True) }}
        </digest>
        <description>
          {{ bits['description']| rst | indent(4,first=True) }}
          {{ bits | constraints(attributes,arguments) }}
        </description>
        {%- if 'default' in bits or 'enum' in bits  -%}
        <attributelist>
          {%- if 'default' in bits -%}
          <attribute name="default" get="1" set="1" type="int" size='{{ bits['size'] }}' value='{{ bits['default'] }}' />
          {%- endif -%}
          {%- if 'enum' in bits -%}
          <attribute name="enumvals" get="1" set="1" type="atom" size='{{ bits['enum'] | length }}'>
            <enumlist>
            {%- for enumname,desc in bits['enum'].items() -%}
              <enum name='{{ enumname }}'>
                <description>
                  {{ desc| rst | indent(4,first=True)}}
                </description>
              </enum>
            {%- endfor -%}
            </enumlist>
          </attribute>
          {%- endif -%}
        </attributelist>
        {%- endif -%}
      </attribute>
    {%- endfor -%}
	</attributelist>
	<!--RELATED-->
	<seealsolist>
    {% for s in seealso %}
    <seealso name='{{ s | as_host_object_name }}' />{% endfor %}
    {% for s in max_seealso %}
    <seealso name='{{ s }}' /> 
    {% endfor %}
	</seealsolist>
</c74object>
